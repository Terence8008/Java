/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package assignment;

import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Terence
 */
public class ProjectManagerMain extends javax.swing.JFrame {
    ArrayList<Student> students = new ArrayList<>();
    ArrayList<Project> projects = new ArrayList<>();
    ArrayList<Lecturer> lecturers = new ArrayList<>();
    
    /**
     * Creates new form ProjectManagerMain
     * @param students
     * @param projects
     * @param lecturers
     */
    public ProjectManagerMain(ArrayList<Student> students, ArrayList<Project> projects, ArrayList<Lecturer> lecturers) {
        this.students = students;
        this.projects = projects;
        this.lecturers = lecturers;
        initComponents();
        DefaultTableModel model = (DefaultTableModel)MainStdListTable.getModel();
        
        for (Student student: students){
            // get student lastest project
            if (!student.getProjects().isEmpty()){
                Project latestProject = student.getProjects().get(student.getProjects().size()-1);
                String [] tableDataRow = {student.getID(), student.getName(), latestProject.getAssessmentType(), latestProject.getSupervisorID(), latestProject.getSecondMarkerID()}; 
                model.addRow(tableDataRow);
            }
        }
    }


    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AssignAssessment = new javax.swing.JDialog();
        jLabel20 = new javax.swing.JLabel();
        AssignAssCloseBtn = new javax.swing.JButton();
        AssignAssIndBtn = new javax.swing.JButton();
        AssignAssIntBtn = new javax.swing.JButton();
        MainPanel = new javax.swing.JPanel();
        Individual = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        AssignAssIndTable = new javax.swing.JTable();
        AssignAssIndAssignBtn = new javax.swing.JButton();
        Intake = new javax.swing.JPanel();
        IntFilterComboBox = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        AssignAssIntTable = new javax.swing.JTable();
        AssignAssIntAssingBtn = new javax.swing.JButton();
        AssignAssFilterbtn = new javax.swing.JButton();
        IntClearBtn = new javax.swing.JButton();
        AssignSecMarkerComboBox = new javax.swing.JComboBox<>();
        AssignSupComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        AssignAssTypeComboBox = new javax.swing.JComboBox<>();
        EditAssessment = new javax.swing.JDialog();
        EditAssConfirmBtn = new javax.swing.JButton();
        EditAssCancelbtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        EditAssStdNameLbl = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        EditAssStdIDLbl = new javax.swing.JLabel();
        EditAssSuperComboBox = new javax.swing.JComboBox<>();
        EditAssSecComboBox = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        EditAssProjIDLbl = new javax.swing.JLabel();
        EditAssTypeComboBox = new javax.swing.JComboBox<>();
        CheckReports = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        CheckReportTable = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        ReportStatusBackBtn = new javax.swing.JButton();
        CheckReportFilterBtn = new javax.swing.JButton();
        CheckReportFilterComboBox = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        CheckReportClearBtn = new javax.swing.JButton();
        EditAssesmentBtn = new javax.swing.JButton();
        MainAssignbtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        MainStdListTable = new javax.swing.JTable();
        MainCheckReportBtn = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        MainSaveNLogout = new javax.swing.JButton();

        jLabel20.setText("Allot by");

        AssignAssCloseBtn.setText("Close");
        AssignAssCloseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssignAssCloseBtnActionPerformed(evt);
            }
        });

        AssignAssIndBtn.setText("Individual");
        AssignAssIndBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssignAssIndBtnActionPerformed(evt);
            }
        });

        AssignAssIntBtn.setText("Intake");
        AssignAssIntBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssignAssIntBtnActionPerformed(evt);
            }
        });

        MainPanel.setLayout(new java.awt.CardLayout());

        AssignAssIndTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student ID", "Student Name", "Intake"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(AssignAssIndTable);
        if (AssignAssIndTable.getColumnModel().getColumnCount() > 0) {
            AssignAssIndTable.getColumnModel().getColumn(0).setResizable(false);
            AssignAssIndTable.getColumnModel().getColumn(1).setResizable(false);
            AssignAssIndTable.getColumnModel().getColumn(2).setResizable(false);
        }

        AssignAssIndAssignBtn.setText("Assign");
        AssignAssIndAssignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssignAssIndAssignBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout IndividualLayout = new javax.swing.GroupLayout(Individual);
        Individual.setLayout(IndividualLayout);
        IndividualLayout.setHorizontalGroup(
            IndividualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, IndividualLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE)
                .addGap(28, 28, 28))
            .addGroup(IndividualLayout.createSequentialGroup()
                .addGap(271, 271, 271)
                .addComponent(AssignAssIndAssignBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        IndividualLayout.setVerticalGroup(
            IndividualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, IndividualLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(AssignAssIndAssignBtn)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        MainPanel.add(Individual, "Individual");

        IntFilterComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2402", "2406", "2410"}));

        jLabel13.setText("Intake");

        AssignAssIntTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student ID", "Student Name", "Intake"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(AssignAssIntTable);
        if (AssignAssIntTable.getColumnModel().getColumnCount() > 0) {
            AssignAssIntTable.getColumnModel().getColumn(0).setResizable(false);
            AssignAssIntTable.getColumnModel().getColumn(1).setResizable(false);
            AssignAssIntTable.getColumnModel().getColumn(2).setResizable(false);
        }

        AssignAssIntAssingBtn.setText("Assign");
        AssignAssIntAssingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssignAssIntAssingBtnActionPerformed(evt);
            }
        });

        AssignAssFilterbtn.setText("Filter");
        AssignAssFilterbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssignAssFilterbtnActionPerformed(evt);
            }
        });

        IntClearBtn.setText("Clear");
        IntClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IntClearBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout IntakeLayout = new javax.swing.GroupLayout(Intake);
        Intake.setLayout(IntakeLayout);
        IntakeLayout.setHorizontalGroup(
            IntakeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IntakeLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(IntakeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(IntakeLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(18, 18, 18)
                        .addComponent(IntFilterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(AssignAssFilterbtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IntClearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(AssignAssIntAssingBtn))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 599, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        IntakeLayout.setVerticalGroup(
            IntakeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IntakeLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(IntakeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IntFilterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(AssignAssFilterbtn)
                    .addComponent(IntClearBtn)
                    .addComponent(AssignAssIntAssingBtn))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        MainPanel.add(Intake, "Intake");

        AssignSecMarkerComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        AssignSupComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("Supervisor");

        jLabel2.setText("Second Marker");

        jLabel11.setText("Assessment Type");

        AssignAssTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Internship", "Investigation Reports", "CP1", "CP2", "RMCP", "FYP" }));

        javax.swing.GroupLayout AssignAssessmentLayout = new javax.swing.GroupLayout(AssignAssessment.getContentPane());
        AssignAssessment.getContentPane().setLayout(AssignAssessmentLayout);
        AssignAssessmentLayout.setHorizontalGroup(
            AssignAssessmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AssignAssessmentLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(AssignAssCloseBtn)
                .addGap(21, 21, 21))
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(AssignAssessmentLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(AssignAssessmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AssignAssessmentLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AssignSupComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AssignSecMarkerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(AssignAssTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(AssignAssessmentLayout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addGap(43, 43, 43)
                        .addComponent(AssignAssIndBtn)
                        .addGap(34, 34, 34)
                        .addComponent(AssignAssIntBtn)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        AssignAssessmentLayout.setVerticalGroup(
            AssignAssessmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AssignAssessmentLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(AssignAssessmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(AssignAssIndBtn)
                    .addComponent(AssignAssIntBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(AssignAssessmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(AssignSupComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AssignAssTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel2)
                    .addComponent(AssignSecMarkerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(MainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(AssignAssCloseBtn)
                .addContainerGap())
        );

        EditAssConfirmBtn.setText("Confirm");
        EditAssConfirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditAssConfirmBtnActionPerformed(evt);
            }
        });

        EditAssCancelbtn.setText("Cancel");

        jLabel5.setText("Student Name");

        jLabel6.setText("Assessment Type");

        jLabel7.setText("Supervisor");

        jLabel8.setText("SecondMarker");

        EditAssStdNameLbl.setText("jLabel9");

        jLabel12.setText("Student ID");

        EditAssStdIDLbl.setText("jLabel13");

        EditAssSuperComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        EditAssSecComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel9.setText("Project ID");

        EditAssProjIDLbl.setText("jLabel13");

        EditAssTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Internship", "Investigation Reports", "CP1", "CP2", "RMCP", "FYP"  }));

        javax.swing.GroupLayout EditAssessmentLayout = new javax.swing.GroupLayout(EditAssessment.getContentPane());
        EditAssessment.getContentPane().setLayout(EditAssessmentLayout);
        EditAssessmentLayout.setHorizontalGroup(
            EditAssessmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EditAssessmentLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(EditAssessmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EditAssessmentLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(EditAssConfirmBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                        .addComponent(EditAssCancelbtn)
                        .addGap(72, 72, 72))
                    .addGroup(EditAssessmentLayout.createSequentialGroup()
                        .addGroup(EditAssessmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel12)
                            .addComponent(jLabel9))
                        .addGap(30, 30, 30)
                        .addGroup(EditAssessmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(EditAssessmentLayout.createSequentialGroup()
                                .addComponent(EditAssProjIDLbl)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(EditAssessmentLayout.createSequentialGroup()
                                .addGroup(EditAssessmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(EditAssStdIDLbl)
                                    .addComponent(EditAssStdNameLbl)
                                    .addComponent(EditAssSuperComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(EditAssSecComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(EditAssTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        EditAssessmentLayout.setVerticalGroup(
            EditAssessmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EditAssessmentLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(EditAssessmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(EditAssStdNameLbl))
                .addGap(18, 18, 18)
                .addGroup(EditAssessmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(EditAssStdIDLbl))
                .addGap(15, 15, 15)
                .addGroup(EditAssessmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(EditAssProjIDLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(EditAssessmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(EditAssTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(EditAssessmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(EditAssSuperComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(EditAssessmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(EditAssSecComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(EditAssessmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EditAssCancelbtn)
                    .addComponent(EditAssConfirmBtn))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        CheckReportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student ID", "Student Name", "Intake", "Assessment Type", "Report Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(CheckReportTable);
        if (CheckReportTable.getColumnModel().getColumnCount() > 0) {
            CheckReportTable.getColumnModel().getColumn(0).setResizable(false);
            CheckReportTable.getColumnModel().getColumn(1).setResizable(false);
            CheckReportTable.getColumnModel().getColumn(2).setResizable(false);
            CheckReportTable.getColumnModel().getColumn(3).setResizable(false);
            CheckReportTable.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel14.setText("Status of Report");

        ReportStatusBackBtn.setText("Back");
        ReportStatusBackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReportStatusBackBtnActionPerformed(evt);
            }
        });

        CheckReportFilterBtn.setText("Filter");
        CheckReportFilterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckReportFilterBtnActionPerformed(evt);
            }
        });

        CheckReportFilterComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2402", "2406", "2410"}));

        jLabel15.setText("Filter by intake");

        CheckReportClearBtn.setText("Clear");
        CheckReportClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckReportClearBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CheckReportsLayout = new javax.swing.GroupLayout(CheckReports.getContentPane());
        CheckReports.getContentPane().setLayout(CheckReportsLayout);
        CheckReportsLayout.setHorizontalGroup(
            CheckReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CheckReportsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(CheckReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CheckReportsLayout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CheckReportFilterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(CheckReportFilterBtn)
                        .addGap(18, 18, 18)
                        .addComponent(CheckReportClearBtn)
                        .addGap(141, 141, 141))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CheckReportsLayout.createSequentialGroup()
                        .addComponent(ReportStatusBackBtn)
                        .addGap(36, 36, 36))))
            .addGroup(CheckReportsLayout.createSequentialGroup()
                .addGroup(CheckReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CheckReportsLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel14))
                    .addGroup(CheckReportsLayout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 588, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        CheckReportsLayout.setVerticalGroup(
            CheckReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CheckReportsLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CheckReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CheckReportFilterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CheckReportFilterBtn)
                    .addComponent(jLabel15)
                    .addComponent(CheckReportClearBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(ReportStatusBackBtn)
                .addGap(17, 17, 17))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        EditAssesmentBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        EditAssesmentBtn.setText("Edit Assessment");
        EditAssesmentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditAssesmentBtnActionPerformed(evt);
            }
        });

        MainAssignbtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        MainAssignbtn.setText("Assign Assessment");
        MainAssignbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MainAssignbtnActionPerformed(evt);
            }
        });

        MainStdListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student ID", "Name ", "AssessmentType", "Supervisor ID", "Second Marker ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(MainStdListTable);

        MainCheckReportBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        MainCheckReportBtn.setText("Check Report");
        MainCheckReportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MainCheckReportBtnActionPerformed(evt);
            }
        });

        jLabel10.setText("Alloted Students list");

        MainSaveNLogout.setText("Save changes and Logout");
        MainSaveNLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MainSaveNLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(MainAssignbtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(EditAssesmentBtn)
                .addGap(48, 48, 48)
                .addComponent(MainCheckReportBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(MainSaveNLogout)
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(MainSaveNLogout, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MainAssignbtn)
                    .addComponent(MainCheckReportBtn)
                    .addComponent(EditAssesmentBtn))
                .addGap(53, 53, 53))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EditAssesmentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditAssesmentBtnActionPerformed
        DefaultTableModel model = (DefaultTableModel)MainStdListTable.getModel();
        int selectedIndex = MainStdListTable.getSelectedRow();
        
        
        if (selectedIndex != -1){
            // Set model for first combo box
            DefaultComboBoxModel<String> comboModel1 = new DefaultComboBoxModel();
            comboModel1 = CreateLecturerComboModel(comboModel1);
            DefaultComboBoxModel<String> comboModel2 = new DefaultComboBoxModel();
            comboModel2 = CreateLecturerComboModel(comboModel2);
            EditAssSecComboBox.setModel(comboModel1 );
            EditAssSuperComboBox.setModel(comboModel2);
            
            // Which student is selected
            String selectedId = String.valueOf(model.getValueAt(selectedIndex, 0));
            for (Student student:students){
                if (student.getID().equals(selectedId)){
                    Project latestProject = student.getProjects().get(student.getProjects().size()-1);
                    EditAssStdNameLbl.setText(student.getName());
                    EditAssStdIDLbl.setText(student.getID());
                    EditAssProjIDLbl.setText(latestProject.getProjectID());
                }
            }
    
            EditAssessment.setVisible(true);
            EditAssessment.setSize(670,440);
        }
        else{
            JOptionPane.showMessageDialog(null,"Select a student first");
        }
    }//GEN-LAST:event_EditAssesmentBtnActionPerformed

    private void MainAssignbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MainAssignbtnActionPerformed
        // Load table
        DefaultTableModel Indmodel = (DefaultTableModel)AssignAssIndTable.getModel();
        DefaultTableModel Intmodel = (DefaultTableModel)AssignAssIntTable.getModel();
        
        // Clear table
        Indmodel.setRowCount(0);
        Intmodel.setRowCount(0);
        
        for (Student student: students){
            if (student.getProjects().isEmpty()){
                String [] tableDataRow = {student.getID(), student.getName(), student.getIntake()}; 
                Indmodel.addRow(tableDataRow);
            }
        }
        
        for (Student student: students){
            if (student.getProjects().isEmpty()){
                String [] tableDataRow = {student.getID(), student.getName(), student.getIntake()}; 
                Intmodel.addRow(tableDataRow);
            }
        }
        
        // Load ComboBox
        DefaultComboBoxModel<String> comboModel1 = new DefaultComboBoxModel();
        comboModel1 = CreateLecturerComboModel(comboModel1);
        DefaultComboBoxModel<String> comboModel2 = new DefaultComboBoxModel();
        comboModel2 = CreateLecturerComboModel(comboModel2);
        AssignSecMarkerComboBox.setModel(comboModel1 );
        AssignSupComboBox.setModel(comboModel2);
        
        AssignAssessment.setVisible(true);
        AssignAssessment.setSize(670,440);
    }//GEN-LAST:event_MainAssignbtnActionPerformed

    private void MainCheckReportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MainCheckReportBtnActionPerformed
        DefaultTableModel model = (DefaultTableModel)CheckReportTable.getModel();
        model.setRowCount(0);
        for (Student student: students){
            // If student have projects
            if (!student.getProjects().isEmpty()){
                Project latestProject = student.getProjects().get(student.getProjects().size()-1);
                String [] tableDataRow = {student.getID(), student.getName(), student.getIntake(), latestProject.getAssessmentType(), latestProject.getReportStatus()}; 
                model.addRow(tableDataRow);
            }
        }
        CheckReports.setVisible(true);
        CheckReports.setSize(650, 430);
    }//GEN-LAST:event_MainCheckReportBtnActionPerformed

    private void EditAssConfirmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditAssConfirmBtnActionPerformed
        String supervisor = String.valueOf(EditAssSuperComboBox.getSelectedItem());
        String secondMarker = String.valueOf(EditAssSecComboBox.getSelectedItem());
        String selectedType = String.valueOf(EditAssTypeComboBox.getSelectedItem());
        String supervisorID = "";
        String secondMarkerID = "";
        
        // get id for superviosr and secondmarker
        for(Lecturer lecturer:lecturers){
            if (lecturer.getName().equals(supervisor)){
                supervisorID = lecturer.getID();
            }
            if (lecturer.getName().equals(secondMarker)){
                secondMarkerID = lecturer.getID();
            }
        }
        
        //Update project in array
        for(Project project:projects){
            if(project.getProjectID().equals(EditAssProjIDLbl.getText())){
                project.setAssessmentType(selectedType);
                project.setSupervisorID(supervisorID);
                project.setSecondMarkerID(secondMarkerID);
            }
        }
        
        RelinkStudentProjects();
        ReinitializeTable();
        EditAssessment.setVisible(false);
    }//GEN-LAST:event_EditAssConfirmBtnActionPerformed

    private void CheckReportFilterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckReportFilterBtnActionPerformed
        DefaultTableModel model = (DefaultTableModel)CheckReportTable.getModel();
        model.setRowCount(0);
        String filteredIntake = String.valueOf(CheckReportFilterComboBox.getSelectedItem());
        for (Student student: students){
            // get student lastest project
            if (!student.getProjects().isEmpty()){
                if(student.getIntake().equals(filteredIntake)){
                    Project latestProject = student.getProjects().get(student.getProjects().size()-1);
                    String [] tableDataRow = {student.getID(), student.getName(), student.getIntake(), latestProject.getAssessmentType(), latestProject.getReportStatus()}; 
                    model.addRow(tableDataRow);
                }
            }
        }
    }//GEN-LAST:event_CheckReportFilterBtnActionPerformed

    private void CheckReportClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckReportClearBtnActionPerformed
        DefaultTableModel model = (DefaultTableModel)CheckReportTable.getModel();
        model.setRowCount(0);
        for (Student student: students){
            // get student lastest project
            if (!student.getProjects().isEmpty()){
                Project latestProject = student.getProjects().get(student.getProjects().size()-1);
                String [] tableDataRow = {student.getID(), student.getName(), student.getIntake(), latestProject.getAssessmentType(), latestProject.getReportStatus()}; 
                model.addRow(tableDataRow);
            }
        }
    }//GEN-LAST:event_CheckReportClearBtnActionPerformed

    private void ReportStatusBackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReportStatusBackBtnActionPerformed
        CheckReports.setVisible(false);
    }//GEN-LAST:event_ReportStatusBackBtnActionPerformed

    private void AssignAssIndBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssignAssIndBtnActionPerformed
        CardLayout card = (CardLayout)MainPanel.getLayout();
        card.show(MainPanel,"Individual");
    }//GEN-LAST:event_AssignAssIndBtnActionPerformed

    private void AssignAssIntBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssignAssIntBtnActionPerformed
        CardLayout card = (CardLayout)MainPanel.getLayout();
        card.show(MainPanel,"Intake");
    }//GEN-LAST:event_AssignAssIntBtnActionPerformed

    private void AssignAssCloseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssignAssCloseBtnActionPerformed
        AssignAssessment.setVisible(false);
    }//GEN-LAST:event_AssignAssCloseBtnActionPerformed

    private void AssignAssFilterbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssignAssFilterbtnActionPerformed
        String selectedIntake = String.valueOf(IntFilterComboBox.getSelectedItem());
        if (IntFilterComboBox.getSelectedIndex()!= -1){
            DefaultTableModel Intmodel = (DefaultTableModel)AssignAssIntTable.getModel();
            Intmodel.setRowCount(0);
            for (Student student: students){
                // if student dont have project and under this intake
                if (student.getProjects().isEmpty() && student.getIntake().equals(selectedIntake)){
                    String [] tableDataRow = {student.getID(), student.getName(), student.getIntake()}; 
                    Intmodel.addRow(tableDataRow);
                }
            }
        }
    }//GEN-LAST:event_AssignAssFilterbtnActionPerformed

    private void IntClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IntClearBtnActionPerformed
        DefaultTableModel Intmodel = (DefaultTableModel)AssignAssIntTable.getModel();
        Intmodel.setRowCount(0);
        for (Student student: students){
            // If student dont have projects
            if (student.getProjects().isEmpty()){
                String [] tableDataRow = {student.getID(), student.getName(), student.getIntake()}; 
                Intmodel.addRow(tableDataRow);
            }
        }
    }//GEN-LAST:event_IntClearBtnActionPerformed

    private void AssignAssIntAssingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssignAssIntAssingBtnActionPerformed
        String selectedIntake = String.valueOf(IntFilterComboBox.getSelectedItem());
        String selectedSupervisor = String.valueOf(AssignSupComboBox.getSelectedItem());
        String selectedSecondMarker = String.valueOf(AssignSecMarkerComboBox.getSelectedItem());
        String selectedAssementType = String.valueOf(AssignAssTypeComboBox.getSelectedItem());
        String supervisorID = "";
        String secondMarkerID = "";
        
        // find lecturer id
        for (Lecturer lecturer: lecturers){
            if (lecturer.getName().equals(selectedSupervisor)){
                supervisorID = lecturer.getID();
            }
            if (lecturer.getName().equals(selectedSecondMarker)){
                secondMarkerID = lecturer.getID();
            }
        }
        
        // check if selected assign type 
        if (AssignAssTypeComboBox.getSelectedIndex() != 1){
            for (Student student: students){
                if (student.getIntake().equals(selectedIntake) && student.getProjects().isEmpty()){
                    int newID = Integer.parseInt(projects.get(projects.size()-1).getProjectID().substring(1)) +1;
                    String newIDIdentifier = "P" + String.valueOf(newID);
                    projects.add(new Project(newIDIdentifier, student.getID(), supervisorID, secondMarkerID, selectedAssementType, "Not set", "Not set", "Not set", "Pending","Pending"));
                }
            }
            RelinkStudentProjects();
            ReinitializeTable();
            AssignAssessment.setVisible(false);
        }
        else {
            JOptionPane.showMessageDialog(null, "Please select an assessment Type");
        }
    }//GEN-LAST:event_AssignAssIntAssingBtnActionPerformed

    private void AssignAssIndAssignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssignAssIndAssignBtnActionPerformed
        DefaultTableModel Indmodel = (DefaultTableModel)AssignAssIndTable.getModel();
        String selectedSupervisor = String.valueOf(AssignSupComboBox.getSelectedItem());
        String selectedSecondMarker = String.valueOf(AssignSecMarkerComboBox.getSelectedItem());
        String selectedAssementType = String.valueOf(AssignAssTypeComboBox.getSelectedItem());
        String supervisorID = "";
        String secondMarkerID = "";
        
        // find lecturer id
        for (Lecturer lecturer: lecturers){
            if (lecturer.getName().equals(selectedSupervisor)){
                supervisorID = lecturer.getID();
            }
            if (lecturer.getName().equals(selectedSecondMarker)){
                secondMarkerID = lecturer.getID();
            }
        }
        
        
        int selectedIndex = AssignAssIndTable.getSelectedRow();
        // If user selected a student
        if (selectedIndex != -1){
            String studentId = String.valueOf(Indmodel.getValueAt(selectedIndex, 0));
            // Look for the student
            for (Student student: students){
                if(student.getID().equals(studentId)){
                    int newID = Integer.parseInt(projects.get(projects.size()-1).getProjectID().substring(1)) +1;
                    String newIDIdentifier = "P" + String.valueOf(newID);
                    projects.add(new Project(newIDIdentifier, student.getID(), supervisorID, secondMarkerID, selectedAssementType, "Not set", "Not set", "Not set", "Pending", "Pending"));
                }
            }
            RelinkStudentProjects();
            ReinitializeTable();
            AssignAssessment.setVisible(false);
        }
        else{
            JOptionPane.showMessageDialog(null, "Please select a student Type");
        }
    }//GEN-LAST:event_AssignAssIndAssignBtnActionPerformed

    private void MainSaveNLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MainSaveNLogoutActionPerformed
        FileIO.ExportProjects(projects);
        this.dispose();
        new Login().setVisible(true);
    }//GEN-LAST:event_MainSaveNLogoutActionPerformed

    public DefaultComboBoxModel<String> CreateLecturerComboModel(DefaultComboBoxModel<String> model){
        // Create model for lecturer name combo box
        for (Lecturer lecturer:lecturers){
            // make sure lecturer is not project manager
            if (lecturer.getPmRole() == false){
               model.addElement(lecturer.getName());
            }
        }
        return model;
    }
    
    public void ReinitializeTable(){
        DefaultTableModel model = (DefaultTableModel)MainStdListTable.getModel();
        model.setRowCount(0);
        for (Student student: students){
            if (!student.getProjects().isEmpty()){
                // get student lastest project
                Project latestProject = student.getProjects().get(student.getProjects().size()-1);
                String [] tableDataRow = {student.getID(), student.getName(), latestProject.getAssessmentType(), latestProject.getSupervisorID(), latestProject.getSecondMarkerID()}; 
                model.addRow(tableDataRow);
            }
        }
    }
    
    public void RelinkStudentProjects(){
        // Clear link
        for (Student student: students){
            student.clearProjects();
        }
        
        // set projects to student
        for (int i = 0; i < students.size(); i ++){
            for(int j = 0; j < projects.size(); j ++)
                if (students.get(i).getID().equals(projects.get(j).getStudentID())){
                    students.get(i).addProject(projects.get(j));
                    
                }
        }
    }
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProjectManagerMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProjectManagerMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProjectManagerMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProjectManagerMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AssignAssCloseBtn;
    private javax.swing.JButton AssignAssFilterbtn;
    private javax.swing.JButton AssignAssIndAssignBtn;
    private javax.swing.JButton AssignAssIndBtn;
    private javax.swing.JTable AssignAssIndTable;
    private javax.swing.JButton AssignAssIntAssingBtn;
    private javax.swing.JButton AssignAssIntBtn;
    private javax.swing.JTable AssignAssIntTable;
    private javax.swing.JComboBox<String> AssignAssTypeComboBox;
    private javax.swing.JDialog AssignAssessment;
    private javax.swing.JComboBox<String> AssignSecMarkerComboBox;
    private javax.swing.JComboBox<String> AssignSupComboBox;
    private javax.swing.JButton CheckReportClearBtn;
    private javax.swing.JButton CheckReportFilterBtn;
    private javax.swing.JComboBox<String> CheckReportFilterComboBox;
    private javax.swing.JTable CheckReportTable;
    private javax.swing.JDialog CheckReports;
    private javax.swing.JButton EditAssCancelbtn;
    private javax.swing.JButton EditAssConfirmBtn;
    private javax.swing.JLabel EditAssProjIDLbl;
    private javax.swing.JComboBox<String> EditAssSecComboBox;
    private javax.swing.JLabel EditAssStdIDLbl;
    private javax.swing.JLabel EditAssStdNameLbl;
    private javax.swing.JComboBox<String> EditAssSuperComboBox;
    private javax.swing.JComboBox<String> EditAssTypeComboBox;
    private javax.swing.JButton EditAssesmentBtn;
    private javax.swing.JDialog EditAssessment;
    private javax.swing.JPanel Individual;
    private javax.swing.JButton IntClearBtn;
    private javax.swing.JComboBox<String> IntFilterComboBox;
    private javax.swing.JPanel Intake;
    private javax.swing.JButton MainAssignbtn;
    private javax.swing.JButton MainCheckReportBtn;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JButton MainSaveNLogout;
    private javax.swing.JTable MainStdListTable;
    private javax.swing.JButton ReportStatusBackBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    // End of variables declaration//GEN-END:variables
}
